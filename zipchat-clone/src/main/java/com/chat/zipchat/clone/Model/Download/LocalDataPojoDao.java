package com.chat.zipchat.clone.Model.Download;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chat.zipchat.clone.Model.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_DATA_POJO".
*/
public class LocalDataPojoDao extends AbstractDao<LocalDataPojo, Long> {

    public static final String TABLENAME = "LOCAL_DATA_POJO";

    /**
     * Properties of entity LocalDataPojo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property StoragePath = new Property(3, String.class, "storagePath", false, "STORAGE_PATH");
        public final static Property IsDownloaded = new Property(4, int.class, "isDownloaded", false, "IS_DOWNLOADED");
    }


    public LocalDataPojoDao(DaoConfig config) {
        super(config);
    }
    
    public LocalDataPojoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_DATA_POJO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"STORAGE_PATH\" TEXT," + // 3: storagePath
                "\"IS_DOWNLOADED\" INTEGER NOT NULL );"); // 4: isDownloaded
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_LOCAL_DATA_POJO_MESSAGE_ID ON \"LOCAL_DATA_POJO\"" +
                " (\"MESSAGE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_DATA_POJO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalDataPojo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String storagePath = entity.getStoragePath();
        if (storagePath != null) {
            stmt.bindString(4, storagePath);
        }
        stmt.bindLong(5, entity.getIsDownloaded());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalDataPojo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String storagePath = entity.getStoragePath();
        if (storagePath != null) {
            stmt.bindString(4, storagePath);
        }
        stmt.bindLong(5, entity.getIsDownloaded());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalDataPojo readEntity(Cursor cursor, int offset) {
        LocalDataPojo entity = new LocalDataPojo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // storagePath
            cursor.getInt(offset + 4) // isDownloaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalDataPojo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStoragePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsDownloaded(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalDataPojo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalDataPojo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalDataPojo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
