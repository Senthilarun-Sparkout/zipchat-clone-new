package com.chat.zipchat.clone.Model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_MEMBER".
*/
public class GroupMemberDao extends AbstractDao<GroupMember, Void> {

    public static final String TABLENAME = "GROUP_MEMBER";

    /**
     * Properties of entity GroupMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Grp_id = new Property(0, Long.class, "grp_id", false, "GRP_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Mobile_number = new Property(3, String.class, "mobile_number", false, "MOBILE_NUMBER");
        public final static Property Profile_picture = new Property(4, String.class, "profile_picture", false, "PROFILE_PICTURE");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property IsAdmin = new Property(6, String.class, "isAdmin", false, "IS_ADMIN");
    }

    private Query<GroupMember> groups_GroupMemberQuery;

    public GroupMemberDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_MEMBER\" (" + //
                "\"GRP_ID\" INTEGER," + // 0: grp_id
                "\"ID\" TEXT," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"MOBILE_NUMBER\" TEXT," + // 3: mobile_number
                "\"PROFILE_PICTURE\" TEXT," + // 4: profile_picture
                "\"STATUS\" TEXT," + // 5: status
                "\"IS_ADMIN\" TEXT);"); // 6: isAdmin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupMember entity) {
        stmt.clearBindings();
 
        Long grp_id = entity.getGrp_id();
        if (grp_id != null) {
            stmt.bindLong(1, grp_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String mobile_number = entity.getMobile_number();
        if (mobile_number != null) {
            stmt.bindString(4, mobile_number);
        }
 
        String profile_picture = entity.getProfile_picture();
        if (profile_picture != null) {
            stmt.bindString(5, profile_picture);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String isAdmin = entity.getIsAdmin();
        if (isAdmin != null) {
            stmt.bindString(7, isAdmin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupMember entity) {
        stmt.clearBindings();
 
        Long grp_id = entity.getGrp_id();
        if (grp_id != null) {
            stmt.bindLong(1, grp_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String mobile_number = entity.getMobile_number();
        if (mobile_number != null) {
            stmt.bindString(4, mobile_number);
        }
 
        String profile_picture = entity.getProfile_picture();
        if (profile_picture != null) {
            stmt.bindString(5, profile_picture);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String isAdmin = entity.getIsAdmin();
        if (isAdmin != null) {
            stmt.bindString(7, isAdmin);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupMember readEntity(Cursor cursor, int offset) {
        GroupMember entity = new GroupMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // grp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // profile_picture
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // isAdmin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupMember entity, int offset) {
        entity.setGrp_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile_number(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProfile_picture(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsAdmin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupMember entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupMember entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupMember entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "groupMember" to-many relationship of Groups. */
    public List<GroupMember> _queryGroups_GroupMember(Long grp_id) {
        synchronized (this) {
            if (groups_GroupMemberQuery == null) {
                QueryBuilder<GroupMember> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Grp_id.eq(null));
                groups_GroupMemberQuery = queryBuilder.build();
            }
        }
        Query<GroupMember> query = groups_GroupMemberQuery.forCurrentThread();
        query.setParameter(0, grp_id);
        return query.list();
    }

}
