package com.chat.zipchat.clone.Model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_POJO".
*/
public class ChatPojoDao extends AbstractDao<ChatPojo, Long> {

    public static final String TABLENAME = "CHAT_POJO";

    /**
     * Properties of entity ChatPojo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property FriendId = new Property(2, String.class, "friendId", false, "FRIEND_ID");
        public final static Property IsMessageSend = new Property(3, int.class, "isMessageSend", false, "IS_MESSAGE_SEND");
        public final static Property FromId = new Property(4, String.class, "fromId", false, "FROM_ID");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
        public final static Property Timestamp = new Property(6, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property ToId = new Property(7, String.class, "toId", false, "TO_ID");
        public final static Property MsgType = new Property(8, String.class, "msgType", false, "MSG_TYPE");
        public final static Property IsRead = new Property(9, String.class, "isRead", false, "IS_READ");
        public final static Property FileUrl = new Property(10, String.class, "fileUrl", false, "FILE_URL");
        public final static Property Lat = new Property(11, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(12, double.class, "lng", false, "LNG");
        public final static Property DeliverId = new Property(13, String.class, "deliverId", false, "DELIVER_ID");
        public final static Property SeenId = new Property(14, String.class, "seenId", false, "SEEN_ID");
        public final static Property IsForward = new Property(15, boolean.class, "isForward", false, "IS_FORWARD");
    }


    public ChatPojoDao(DaoConfig config) {
        super(config);
    }
    
    public ChatPojoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_POJO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageId
                "\"FRIEND_ID\" TEXT," + // 2: friendId
                "\"IS_MESSAGE_SEND\" INTEGER NOT NULL ," + // 3: isMessageSend
                "\"FROM_ID\" TEXT," + // 4: fromId
                "\"TEXT\" TEXT," + // 5: text
                "\"TIMESTAMP\" TEXT," + // 6: timestamp
                "\"TO_ID\" TEXT," + // 7: toId
                "\"MSG_TYPE\" TEXT," + // 8: msgType
                "\"IS_READ\" TEXT," + // 9: isRead
                "\"FILE_URL\" TEXT," + // 10: fileUrl
                "\"LAT\" REAL NOT NULL ," + // 11: lat
                "\"LNG\" REAL NOT NULL ," + // 12: lng
                "\"DELIVER_ID\" TEXT," + // 13: deliverId
                "\"SEEN_ID\" TEXT," + // 14: seenId
                "\"IS_FORWARD\" INTEGER NOT NULL );"); // 15: isForward
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHAT_POJO_MESSAGE_ID ON \"CHAT_POJO\"" +
                " (\"MESSAGE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_POJO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatPojo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
        stmt.bindLong(4, entity.getIsMessageSend());
 
        String fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindString(5, fromId);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(7, timestamp);
        }
 
        String toId = entity.getToId();
        if (toId != null) {
            stmt.bindString(8, toId);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(9, msgType);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(10, isRead);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(11, fileUrl);
        }
        stmt.bindDouble(12, entity.getLat());
        stmt.bindDouble(13, entity.getLng());
 
        String deliverId = entity.getDeliverId();
        if (deliverId != null) {
            stmt.bindString(14, deliverId);
        }
 
        String seenId = entity.getSeenId();
        if (seenId != null) {
            stmt.bindString(15, seenId);
        }
        stmt.bindLong(16, entity.getIsForward() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatPojo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
        stmt.bindLong(4, entity.getIsMessageSend());
 
        String fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindString(5, fromId);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(7, timestamp);
        }
 
        String toId = entity.getToId();
        if (toId != null) {
            stmt.bindString(8, toId);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(9, msgType);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(10, isRead);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(11, fileUrl);
        }
        stmt.bindDouble(12, entity.getLat());
        stmt.bindDouble(13, entity.getLng());
 
        String deliverId = entity.getDeliverId();
        if (deliverId != null) {
            stmt.bindString(14, deliverId);
        }
 
        String seenId = entity.getSeenId();
        if (seenId != null) {
            stmt.bindString(15, seenId);
        }
        stmt.bindLong(16, entity.getIsForward() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatPojo readEntity(Cursor cursor, int offset) {
        ChatPojo entity = new ChatPojo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendId
            cursor.getInt(offset + 3), // isMessageSend
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // text
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timestamp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // toId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // msgType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isRead
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileUrl
            cursor.getDouble(offset + 11), // lat
            cursor.getDouble(offset + 12), // lng
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // deliverId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // seenId
            cursor.getShort(offset + 15) != 0 // isForward
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatPojo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsMessageSend(cursor.getInt(offset + 3));
        entity.setFromId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMsgType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsRead(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLat(cursor.getDouble(offset + 11));
        entity.setLng(cursor.getDouble(offset + 12));
        entity.setDeliverId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSeenId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsForward(cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatPojo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatPojo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatPojo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
