package com.chat.zipchat.clone.Model.ChatList;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chat.zipchat.clone.Model.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LIST_POJO".
*/
public class ChatListPojoDao extends AbstractDao<ChatListPojo, Long> {

    public static final String TABLENAME = "CHAT_LIST_POJO";

    /**
     * Properties of entity ChatListPojo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property Timestamp = new Property(2, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property ToId = new Property(3, String.class, "toId", false, "TO_ID");
        public final static Property IsGroup = new Property(4, boolean.class, "isGroup", false, "IS_GROUP");
    }


    public ChatListPojoDao(DaoConfig config) {
        super(config);
    }
    
    public ChatListPojoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LIST_POJO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEXT\" TEXT," + // 1: text
                "\"TIMESTAMP\" TEXT," + // 2: timestamp
                "\"TO_ID\" TEXT," + // 3: toId
                "\"IS_GROUP\" INTEGER NOT NULL );"); // 4: isGroup
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHAT_LIST_POJO_TO_ID ON \"CHAT_LIST_POJO\"" +
                " (\"TO_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LIST_POJO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatListPojo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(3, timestamp);
        }
 
        String toId = entity.getToId();
        if (toId != null) {
            stmt.bindString(4, toId);
        }
        stmt.bindLong(5, entity.getIsGroup() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatListPojo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(3, timestamp);
        }
 
        String toId = entity.getToId();
        if (toId != null) {
            stmt.bindString(4, toId);
        }
        stmt.bindLong(5, entity.getIsGroup() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatListPojo readEntity(Cursor cursor, int offset) {
        ChatListPojo entity = new ChatListPojo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // toId
            cursor.getShort(offset + 4) != 0 // isGroup
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatListPojo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsGroup(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatListPojo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatListPojo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatListPojo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
