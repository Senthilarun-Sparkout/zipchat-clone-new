package com.chat.zipchat.clone.Model.Group;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chat.zipchat.clone.Model.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUPS".
*/
public class GroupsDao extends AbstractDao<Groups, Long> {

    public static final String TABLENAME = "GROUPS";

    /**
     * Properties of entity Groups.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Grp_id = new Property(0, Long.class, "grp_id", true, "_id");
        public final static Property Group_id = new Property(1, String.class, "group_id", false, "GROUP_ID");
    }

    private DaoSession daoSession;


    public GroupsDao(DaoConfig config) {
        super(config);
    }
    
    public GroupsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: grp_id
                "\"GROUP_ID\" TEXT);"); // 1: group_id
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GROUPS_GROUP_ID ON \"GROUPS\"" +
                " (\"GROUP_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Groups entity) {
        stmt.clearBindings();
 
        Long grp_id = entity.getGrp_id();
        if (grp_id != null) {
            stmt.bindLong(1, grp_id);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(2, group_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Groups entity) {
        stmt.clearBindings();
 
        Long grp_id = entity.getGrp_id();
        if (grp_id != null) {
            stmt.bindLong(1, grp_id);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(2, group_id);
        }
    }

    @Override
    protected final void attachEntity(Groups entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Groups readEntity(Cursor cursor, int offset) {
        Groups entity = new Groups( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // grp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // group_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Groups entity, int offset) {
        entity.setGrp_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Groups entity, long rowId) {
        entity.setGrp_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Groups entity) {
        if(entity != null) {
            return entity.getGrp_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Groups entity) {
        return entity.getGrp_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
