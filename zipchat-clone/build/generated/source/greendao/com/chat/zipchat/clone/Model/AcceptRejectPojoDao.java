package com.chat.zipchat.clone.Model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCEPT_REJECT_POJO".
*/
public class AcceptRejectPojoDao extends AbstractDao<AcceptRejectPojo, Void> {

    public static final String TABLENAME = "ACCEPT_REJECT_POJO";

    /**
     * Properties of entity AcceptRejectPojo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FriendId = new Property(0, String.class, "friendId", false, "FRIEND_ID");
        public final static Property Receive_request_count = new Property(1, String.class, "receive_request_count", false, "RECEIVE_REQUEST_COUNT");
        public final static Property Send_request_count = new Property(2, String.class, "send_request_count", false, "SEND_REQUEST_COUNT");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
    }


    public AcceptRejectPojoDao(DaoConfig config) {
        super(config);
    }
    
    public AcceptRejectPojoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCEPT_REJECT_POJO\" (" + //
                "\"FRIEND_ID\" TEXT," + // 0: friendId
                "\"RECEIVE_REQUEST_COUNT\" TEXT," + // 1: receive_request_count
                "\"SEND_REQUEST_COUNT\" TEXT," + // 2: send_request_count
                "\"STATUS\" TEXT);"); // 3: status
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ACCEPT_REJECT_POJO_FRIEND_ID ON \"ACCEPT_REJECT_POJO\"" +
                " (\"FRIEND_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCEPT_REJECT_POJO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AcceptRejectPojo entity) {
        stmt.clearBindings();
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(1, friendId);
        }
 
        String receive_request_count = entity.getReceive_request_count();
        if (receive_request_count != null) {
            stmt.bindString(2, receive_request_count);
        }
 
        String send_request_count = entity.getSend_request_count();
        if (send_request_count != null) {
            stmt.bindString(3, send_request_count);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AcceptRejectPojo entity) {
        stmt.clearBindings();
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(1, friendId);
        }
 
        String receive_request_count = entity.getReceive_request_count();
        if (receive_request_count != null) {
            stmt.bindString(2, receive_request_count);
        }
 
        String send_request_count = entity.getSend_request_count();
        if (send_request_count != null) {
            stmt.bindString(3, send_request_count);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AcceptRejectPojo readEntity(Cursor cursor, int offset) {
        AcceptRejectPojo entity = new AcceptRejectPojo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // friendId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // receive_request_count
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // send_request_count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AcceptRejectPojo entity, int offset) {
        entity.setFriendId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReceive_request_count(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSend_request_count(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AcceptRejectPojo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AcceptRejectPojo entity) {
        return null;
    }

    @Override
    public boolean hasKey(AcceptRejectPojo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
